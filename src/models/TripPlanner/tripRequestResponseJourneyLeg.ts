/**
 * Trip Planner
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import {SimpleCoords} from "../../classes/types";
import { TripRequestResponseJourneyLegInterchange } from './tripRequestResponseJourneyLegInterchange';
import { TripRequestResponseJourneyLegPathDescription } from './tripRequestResponseJourneyLegPathDescription';
import { TripRequestResponseJourneyLegStop } from './tripRequestResponseJourneyLegStop';
import { TripRequestResponseJourneyLegStopFootpathInfo } from './tripRequestResponseJourneyLegStopFootpathInfo';
import { TripRequestResponseJourneyLegStopInfo } from './tripRequestResponseJourneyLegStopInfo';
import { TripTransportation } from './tripTransportation';

/**
 * This element describes a single leg of a journey. A journey is made up of one or more legs.
 */
export interface TripRequestResponseJourneyLeg { 
    /**
     * The approximate amount of time in seconds required to complete this journey leg.
     */
    duration?: number;
    /**
     * This indicates whether or not real-time data has been used to calculate the departure/arrival timestamps
     */
    isRealtimeControlled?: boolean;
    origin: TripRequestResponseJourneyLegStop;
    destination: TripRequestResponseJourneyLegStop;
    transportation?: TripTransportation;
    /**
     * Contains a number of additional informational messages that may be useful for travellers.
     */
    hints?: Array<any>;
    /**
     * This is a list of all stops that are made for this leg. It is sorted in order of its stopping sequence. If the leg is a walking leg between two stops, then this will contain these two stops in order. 
     */
    stopSequence?: Array<TripRequestResponseJourneyLegStop>;
    /**
     * If the leg corresponds to a walking leg, this element contains walking directions. 
     */
    footPathInfo?: Array<TripRequestResponseJourneyLegStopFootpathInfo>;
    /**
     * Contains a number of service alert messages relating to this journey leg. Information returned here is also available using the `XML_ADDINFO_REQUEST` API endpoint. 
     */
    infos?: Array<TripRequestResponseJourneyLegStopInfo>;
    /**
     * Contains walking information for completing this journey leg.
     */
    pathDescriptions?: Array<TripRequestResponseJourneyLegPathDescription>;
    interchange?: TripRequestResponseJourneyLegInterchange;
    /**
     * This elements contains a list of coordinates that this journey leg follows. A line between can be plotted between these coordinates in order when representing the journey on a map in order to show where the vehicle travels (or for a walking leg, the path to be walked). 
     */
    coords?: Array<SimpleCoords>;
    /**
     * Contains additional information about this journey leg, such as wheelchair accessibility information.  
     */
    properties?: any;
}