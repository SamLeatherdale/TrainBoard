/**
 * Trip Planner
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import {SimpleCoords} from "../../classes/types";

import { ParentLocation } from './parentLocation';

/**
 * Contains information about a single stop in the journey leg. Typically, the first stop in a journey leg will only include departure time information, while the last stop in a journey leg will only include arrival time information. Stops in between will include both arrival and departure time information. 
 */
export interface TripRequestResponseJourneyLegStop { 
    /**
     * This is a unique ID for the returned location. Certain types of ID can be used for subsequent searches performed with `XML_STOPFINDER_REQUEST`, or can be used as the origin or destination in an `XML_TRIP_REQUEST2` request. The format of a location ID differs greatly, depending on the type of location it is. 
     */
    id: string;
    /**
     * This is the long version of the location name, which may include the suburb or other information. 
     */
    name: string;
    /**
     * This is the short version of the location name, which does not include the suburb or other information. 
     */
    disassembledName: string;
    /**
     * This is the type of location being returned. It will typically represent a specific stop or platform. 
     */
    type: TripRequestResponseJourneyLegStop.TypeEnum;
    /**
     * Contains exactly two values: the first value is the latitude, the second value is the longitude. 
     */
    coord: SimpleCoords;
    parent: ParentLocation;
    /**
     * A timestamp in `YYYY-MM-DDTHH:MM:SSZ` format that indicates the estimated departure time. If real-time information is available then this timestamp is the real-time estimate, otherwise it is the same as the value in `departureTimePlanned`. 
     */
    departureTimeEstimated: string;
    /**
     * A timestamp in `YYYY-MM-DDTHH:MM:SSZ` format that indicates the planned departure time. This is the original scheduled time. 
     */
    departureTimePlanned: string;
    /**
     * A timestamp in `YYYY-MM-DDTHH:MM:SSZ` format that indicates the estimated arrival time. If real-time information is available then this timestamp is the real-time estimate, otherwise it is the same as the value in `arrivalTimePlanned`. 
     */
    arrivalTimeEstimated: string;
    /**
     * A timestamp in `YYYY-MM-DDTHH:MM:SSZ` format that indicates the planned arrival time. This is the original scheduled time. 
     */
    arrivalTimePlanned: string;
    /**
     * Contains additional information about this stop, such as wheelchair accessibility information. 
     */
    properties: any;
}
export namespace TripRequestResponseJourneyLegStop {
    export type TypeEnum = 'poi' | 'singlehouse' | 'stop' | 'platform' | 'street' | 'locality' | 'location' | 'unknown';
    export const TypeEnum = {
        Poi: 'poi' as TypeEnum,
        Singlehouse: 'singlehouse' as TypeEnum,
        Stop: 'stop' as TypeEnum,
        Platform: 'platform' as TypeEnum,
        Street: 'street' as TypeEnum,
        Locality: 'locality' as TypeEnum,
        Location: 'location' as TypeEnum,
        Unknown: 'unknown' as TypeEnum
    };
}