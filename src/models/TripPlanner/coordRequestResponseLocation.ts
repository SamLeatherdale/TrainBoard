/**
 * Trip Planner
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { ParentLocation } from './parentLocation';

/**
 * Describes a single point that is returned based on the given request.  
 */
export interface CoordRequestResponseLocation { 
    /**
     * This is a unique ID for the returned location. Certain types of ID can be used for subsequent searches performed with `XML_STOPFINDER_REQUEST`, or can be used as the origin or destination in an `XML_TRIP_REQUEST2` request. The format of a location ID differs greatly, depending on the type of location it is. 
     */
    id?: string;
    /**
     * This specifies the type of the returned item. If you search with a type of `GIS_POINT`, a returned item has a type of `gisPoint`. 
     */
    type?: CoordRequestResponseLocation.TypeEnum;
    /**
     * Contains a human-readable title for the location. 
     */
    name?: string;
    /**
     * This is the short version of the location name, which does not include the suburb or other information. 
     */
    disassembledName?: string;
    parent?: ParentLocation;
    /**
     * Contains exactly two values: the first value is the latitude, the second value is the longitude. 
     */
    coord?: Array<number>;
    /**
     * This data contains additional information about each location, mainly related to how it can be categorised or displayed on a map. 
     */
    properties?: any;
}
export namespace CoordRequestResponseLocation {
    export type TypeEnum = 'poi' | 'singlehouse' | 'stop' | 'platform' | 'street' | 'locality' | 'location' | 'gisPoint' | 'unknown';
    export const TypeEnum = {
        Poi: 'poi' as TypeEnum,
        Singlehouse: 'singlehouse' as TypeEnum,
        Stop: 'stop' as TypeEnum,
        Platform: 'platform' as TypeEnum,
        Street: 'street' as TypeEnum,
        Locality: 'locality' as TypeEnum,
        Location: 'location' as TypeEnum,
        GisPoint: 'gisPoint' as TypeEnum,
        Unknown: 'unknown' as TypeEnum
    };
}