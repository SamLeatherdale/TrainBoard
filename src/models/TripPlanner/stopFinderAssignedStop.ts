/**
 * Trip Planner
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { ParentLocation } from './parentLocation';

/**
 * An assigned stop is a location that public transport stops at. Locations / places of interest that aren't stops may have one or more stops \"assigned\" to it as being \"the stop(s) you would use if you were in this location\".  
 */
export interface StopFinderAssignedStop { 
    /**
     * This is a unique ID for the returned location. Certain types of ID can be used for subsequent searches performed with `XML_STOPFINDER_REQUEST`, or can be used as the origin or destination in an `XML_TRIP_REQUEST2` request. The format of a location ID differs greatly, depending on the type of location it is. 
     */
    id?: string;
    /**
     * This is the long version of the location name, which may include the suburb or other information. 
     */
    name?: string;
    /**
     * This is the short version of the location name, which does not include the suburb or other information. 
     */
    disassembledName?: string;
    /**
     * This is the number of minutes it would take to reach this stop from the location to which it is assigned.
     */
    duration?: number;
    /**
     * This is the distance in metres to this stop from the location to which it is assigned.
     */
    distance?: number;
    /**
     * Contains exactly two values: the first value is the latitude, the second value is the longitude. 
     */
    coord?: Array<number>;
    parent?: ParentLocation;
    /**
     * A value of `unknown` likely indicates bad data. If a location is returned with this type, you can safely ignore it. 
     */
    type?: StopFinderAssignedStop.TypeEnum;
    /**
     * This is included only if the `type` value is set to `stop`. Contains a list of modes of transport that service this stop. This can be useful for showing relevant wayfinding icons when presenting users with a list of matching stops to choose from.  The following values may be present:  * `1`: Train * `4`: Light Rail * `5`: Bus * `7`: Coach * `9`: Ferry * `11`: School Bus 
     */
    modes?: Array<number>;
    /**
     * This is the mode of transport that is used to connect to this stop. The following values are available:  * `1`: Train * `4`: Light Rail * `5`: Bus * `7`: Coach * `9`: Ferry * `11`: School Bus * `97`: Remain On-Board * `99`: Walking * `100`: Walking * `105`: Driving 
     */
    connectingMode?: number;
}
export namespace StopFinderAssignedStop {
    export type TypeEnum = 'poi' | 'singlehouse' | 'stop' | 'platform' | 'street' | 'locality' | 'location' | 'unknown';
    export const TypeEnum = {
        Poi: 'poi' as TypeEnum,
        Singlehouse: 'singlehouse' as TypeEnum,
        Stop: 'stop' as TypeEnum,
        Platform: 'platform' as TypeEnum,
        Street: 'street' as TypeEnum,
        Locality: 'locality' as TypeEnum,
        Location: 'location' as TypeEnum,
        Unknown: 'unknown' as TypeEnum
    };
}